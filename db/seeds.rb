# frozen_string_literal: true

# This file can be:
#   - loaded with the `bin/rails db:seed` command, or
#   - created alongside the database with `db:setup`
# Examples:
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)

demo_user = User.create!(name: 'young suss', email: 'ysuss@example.com', password: 'foobar')

# first deck

pg_deck = Deck.create!(title: 'Paul Graham Essays', user: demo_user)

pg_note_one = Note.create!(
  active: true,
  next_occurrence: Date.today,
  current_interval: 1,
  deck: pg_deck,
  content: "- It's not that unprestigious types of work are good, _per se_.\n- But when you find yourself drawn to some kind of work despite its current lack of prestige, it's a sign that:\n  - there's something real to be discovered there, and\n  - you have the right kind of motives.\n    - Impure motives are a big dang>er for the ambitious.\n    - If anything is going to lead you astray, it will be the desire to impress people.\n  - So while working on things that aren't prestigious doesn't guarantee you're on the right track, it at least guarantees you're not on the most common type of wrong one."
)

pg_note_two = Note.create!(
  active: true,
  next_occurrence: Date.today,
  current_interval: 3,
  deck: pg_deck,
  content: "- One of my tricks for writing essays had always been to give talks.\n  - The prospect of having to\n    - stand up in front of a group of people and\n    - tell them something that wouldn't waste their time\n  - was a great spur to the imagination."
)

pg_note_three = Note.create!(
  active: true,
  next_occurrence: Date.today,
  current_interval: 5,
  deck: pg_deck,
  content: "- Customs continue to constrain you long after the restrictions that caused them have disappeared.\n  - Customary VC practice had once, like the customs about publishing essays, been based on real constraints.\n    - Startups had once been much more expensive to start, and proportionally rare.\n    - Now they could be cheap and common, but\n      - the VCs' customs still reflected the old world, just as\n      - customs about writing essays still reflected the constraints of the print era.\n  - Which in turn implies that people who are independent-minded (i.e. less influenced by custom) will have an advantage in fields affected by rapid change (where customs are more likely to be obsolete).\n    - Here's an interesting point, though: you can't always predict which fields will be affected by rapid change.\n    - Obviously software and venture capital will be, but who would have predicted that essay writing would be?"
)

# second deck

ccss_deck = Deck.create!(title: 'Crash Course Study Skills', user: demo_user)

ccss_note_one = Note.create!(
  active: true,
  next_occurrence: Date.today,
  current_interval: 1,
  deck: ccss_deck,
  content: "- Hand-written notes are superior to typed \n	- At least partially because the former forces you to focus more on the semantics (vs pure syntax) of the message you’re hearing \n	- This derives from the need to rephrase, in order to compensate for the slower pace of notetaking."
)

ccss_note_two = Note.create!(
  active: true,
  next_occurrence: Date.today + 1,
  current_interval: 1,
  deck: ccss_deck,
  content: "- Set a countdown timer as you sit down to read a chapter\n	- It’s not important to actually hit this goal; rather, \n	- It’s to help you focus on reading through to the end w/o distraction"
)

ccss_note_three = Note.create!(
  active: true,
  next_occurrence: Date.today,
  current_interval: 2,
  deck: ccss_deck,
  content: '- Highlighting can be dangerous: it often confuses the user as to their actual recall abilities (vs their recognition skill)'
)

ccss_note_four = Note.create!(
  active: true,
  next_occurrence: Date.today + 2,
  current_interval: 2,
  deck: ccss_deck,
  content: "- SQ3R for Active Reading:\n	1. Surveying \n		- prime the brain\n		- skim the overview/headings/conclusion \n	2. Questioning \n		- focus the avenues of exploration\n		- write out some Q’s that come to mind before reading \n	3. Reading \n		- read in order to answer the questions generated by #2\n	4. Reciting \n		- later, retrieve from memory what you read \n		- imagine you were explaining it to a friend \n		- important to use your own words to rephrase the material\n	5. Review \n		- still later, repeat #4\n		- this time, use a deeper, more dialogic method \n		- you should need to return to the passage for citations and details"
)

ccss_note_five = Note.create!(
  active: true,
  next_occurrence: Date.today,
  current_interval: 3,
  deck: ccss_deck,
  content: "- Robert Bjork’s 'desirable difficulty principle'\n	- Memories have two types of ‘strength’\n		1. Storage strength: once a memory is encoded, it can really only get stronger\n		2. Retrieval strength: this does fade with time\n	- The greater the difficulty in recalling a memory (i.e. the weaker the current retrieval strength), the greater the learning impact will be from recalling it."
)

ccss_note_six = Note.create!(
  active: true,
  next_occurrence: Date.today + 3,
  current_interval: 3,
  deck: ccss_deck,
  content: "- When problem-solving: \n	- Write down your failed solution attempts, as \n	- Reviewing them will help you envision new paths, via variations on them"
)

ccss_note_seven = Note.create!(
  active: true,
  next_occurrence: Date.today + 1,
  current_interval: 5,
  deck: ccss_deck,
  content: "- Next time you need to ask a senior dev for help, \n	- Note down and later analyze where you got blocked, then \n	- Think through how you could have gotten around that blocker yourself"
)

ccss_note_eight = Note.create!(
  active: true,
  next_occurrence: Date.today,
  current_interval: 5,
  deck: ccss_deck,
  content: "- When researching:\n	- Prewrite first, to arm yourself with questions and potential lines of argument which will then help you focus your exploration;\n	- Prevent ‘research recursion syndrom’ by asking, after every few hours, whether you have:\n		- At least 2 sources for each main argument, and\n		- At least one source for each non-crucial point (and, if both are true, then stopping the research process in order to begin writing.)"
)

# third deck

p2020_meetup_deck = Deck.create!(title: 'Paul Graham Essays', user: demo_user)

p2020_meetup_note_one = Note.create!(
  active: true,
  next_occurrence: Date.today + 4,
  current_interval: 1,
  deck: p2020_meetup_deck,
  content: "- Be careful of the trap of referencing user data that you already have.\n	- It's easy to use, and should be used: because it's already there.\n	- Don't take for granted, though, that it includes all the information you need (it almost certainly does not.) \n	- Be sure to ask yourself: what data do we *wish* we had?"
)

p2020_meetup_note_two = Note.create!(
  active: true,
  next_occurrence: Date.today,
  current_interval: 8,
  deck: p2020_meetup_deck,
  content: "- Job to Be Done: what does the user want to achieve?\n	- Functional aspects\n		- e.g. cost, timing, duration, location\n		- Start with these, to quickly narrow down and focus your options\n	- Emotional aspects \n	  - e.g. personal (how the user feels) or social (how the user thinks society sees it)\n	  - Subjective requirements, so harder to reason about quantitatively\n	  - Ultimately, higher ROI for persuasion\n	- Good phrasing to start from: '_I need ${x} so that ${y}._'"
)

p2020_meetup_note_three = Note.create!(
  active: true,
  next_occurrence: Date.today + 1,
  current_interval: 3,
  deck: p2020_meetup_deck,
  content: "- Do your project/product for fun, then when it becomes overwhelming set up a company.\n  - 'Place small bets' \n    - first on your own, in your class; then \n    - Using gSites for a few friends; then \n    - trial with [4.0 Schools](https://4pt0.org/)\n    - Each time, test a progressively more important hypothesis\n  - Remember, a startup is inherently temporary\n    - It's a search for a model, not an institution.\n    - Steve Blank: '_a startup is just a discovery process for a business: once you have a sustainable, scalable model? Then it's a business._'"
)

# tags

tag_one = Tag.create!(content: '"What I Worked On"')
tag_two = Tag.create!(content: 'from an essay')
tag_three = Tag.create!(content: 'what to focus on')
tag_four = Tag.create!(content: 'productivity')
tag_five = Tag.create!(content: 'notetaking')
tag_six = Tag.create!(content: 'researching')
tag_seven = Tag.create!(content: 'memory')
tag_eight = Tag.create!(content: 'problem-solving')
tag_nine = Tag.create!(content: 'product')
tag_ten = Tag.create!(content: 'from a lecture')

[pg_note_one, pg_note_two, pg_note_three].each do |note|
  [tag_one, tag_two].each do |tag|
    NoteTag.create!(tag: tag, note: note)
  end
end

[pg_note_one, pg_note_three].each do |note|
  NoteTag.create!(tag: tag_three, note: note)
end

NoteTag.create!(tag: tag_four, note: pg_note_two)

[ccss_note_one, ccss_note_three].each do |note|
  NoteTag.create!(tag: tag_five, note: note)
end

[ccss_note_one, ccss_note_three, ccss_note_two, ccss_note_four, ccss_note_eight].each do |note|
  NoteTag.create!(tag: tag_six, note: note)
end

NoteTag.create!(tag: tag_seven, note: ccss_note_five)

[ccss_note_six, ccss_note_seven].each do |note|
  NoteTag.create!(tag: tag_eight, note: note)
end

[p2020_meetup_note_one, p2020_meetup_note_two, p2020_meetup_note_three].each do |note|
  NoteTag.create!(tag: tag_nine, note: note)
end

[ccss_note_one, ccss_note_two, ccss_note_three, ccss_note_four, ccss_note_five, ccss_note_six,
 ccss_note_seven, ccss_note_eight, p2020_meetup_note_one, p2020_meetup_note_two,
 p2020_meetup_note_three].each do |note|
  NoteTag.create!(tag: tag_ten, note: note)
end
